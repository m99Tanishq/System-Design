flexible, scalable, maintainable, and reusable code

1.Single Responsibility Principle (SRP)
2.Open/Closed Principle
3.Liskov’s Substitution Principle (LSP)
4.Interface Segregation Principle (ISP)
5.Dependency Inversion Principle (DIP)

1. S ->
A class should have only one reason to change
means every class should have a single responsibility or single job or single purpose.

class Marker {
     String name;
     String color;
     int year;
     int price;

     public Marker(String name, String color, int year, int price){
     this.name = name;
     this.color = color;
     this.year = year;
     this.price = price;
     }
}

class Invoice {
     private Marker marker;
     private int quantity;

     public Invoice(Marker marker, int quantity){
     this.marker = marker;
     this.quantity = quantity;
     }

     public int calculateTotal() {
     int price = (marker.price) * this.quantity;
     return price;
     }

     public void printInvoice() {
     // Something
     }
}

Now here we have 2 function in class Invoice but there a two reason to change that don't follow 1st.
Instead we have

class Invoice {
     private Marker marker;
     private int quantity;

     public Invoice(Marker marker, int quantity){
     this.marker = marker;
     this.quantity = quantity;
     }

     public int calculateTotal() {
     int price = (marker.price) * this.quantity;
     return price;
     }
}

class printInvoice {
     private Invoice invoice;

     public printInvoice(Invoice invoice){
     this.invoice = invoice;
     }

     public void printInvoice() {
     // Something
     }
}

2. OCP ->
Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification
means you should be able to extend a class behavior, without modifying it.

class InvoiceDao {
      Invoice invoice;

      public InvoiceDao(Invoice invoice){
      this.invoice = invoice;
      }

      public void saveToDB(){
      // Something
      }
}

Now new Request to Save it To File Also, Instead of adding a new function in the InvoiceDao class we will make a interface which we will implements and will add different functionality as to save the data,
...

interface InvoiceDao{
      public void save(Invoice invoice);
}

class DatabaseInvoiceDao implements InvoiceDao{
      @Override
      public void save(Invoice invoice){
       // save to DB
      }
}

class FileInvoiceDao implements InvoiceDao{
      @Override
      public void save(Invoice invoice){
       // save to File
      }
}

3. Liskov’s Substitution Principle
Derived or child classes must be substitutable for their base or parent classes
means that any class that is the child of a parent class should be usable in place of its parent without any unexpected behavior.

interface Bike {
     void turnOnEngine();
     void accelerate();
}

class Motorcycle implements Bike{
     boolean isEngineOn;
     int speed;

     public void turnOnEngine() {
          isEngineOn = true;
     }

     public void accelerate() {
          speed += 10;
     }
}

class Cycle implements Bike{
     boolean isEngineOn;
     int speed;

     public void turnOnEngine() {
          throw new AssertionError("there is no Engine");  (IMP)
     }

     public void accelerate() {
          // Something
     }
}

4. Interface Segregation Principle (ISP)
do not force any client to implement an interface which is irrelevant to them
means to focus on avoiding fat interface and give preference to many small client-specific interfaces.

interface RestaurantEmployee {
     void washDishes();
     void cookFood();
     void serverCustomer();
}

class waiter implements RestaurantEmployee {

     public void washDishes(){
        // not my job
     }

     public void cookFood(){
        // not my job
     }

     public void serverCustomer(){
         System.out.println("serving customer");
     }
}

interface WaiterInterface {
     void serverCustomer();
     void takeOrder();
}

interface ChefInterface {
     void cookFood();
     void decideMenu();
}

class waiter implements WaiterInterface {

     public void serverCustomer(){
        //  my job
     }

     public void takeOrder(){
        //  my job
     }
}

5. Dependency Inversion Principle (DIP)
 Class Should Depend on Interface Rather Than Concrete class


 class MackBook {
    private final WiredKeyboard keyboard;
    private final WiredMouse mouse;

    public MackBook(){
    keyboard = newWiredKeyBoard;
    mouse = newWiredMouse;
    }
 }


 class MackBook {
    private final Keyboard keyboard;
    private final Mouse mouse;

    public MackBook(Keyboard keyboard, Mouse mouse){
    this.keyboard = KeyBoard;
    this.mouse = Mouse;
    }
 }



